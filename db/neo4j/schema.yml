# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of ActiveNode to
# incrementally modify your database, and then regenerate this schema definition.
#
# Note that this schema.yml definition is the authoritative source for your
# database schema. If you need to create the application database on another
# system, you should be using neo4j:schema:load, not running all the migrations
# from scratch. The latter is a flawed and unsustainable approach (the more migrations
# you'll amass, the slower it'll run and the greater likelihood for issues).
#
# It's strongly recommended that you check this file into your version control system.

---
:constraints:
- CONSTRAINT ON ( `neo4j::migrations::schemamigration`:`Neo4j::Migrations::SchemaMigration`
  ) ASSERT `neo4j::migrations::schemamigration`.migration_id IS UNIQUE
<<<<<<< HEAD
- CONSTRAINT ON ( user:User ) ASSERT user.uuid IS UNIQUE
:indexes: []
:versions:
<<<<<<< HEAD
=======
- '20190605225357'
- '20190607203749'
- '20190607203837'
- '20190607204133'
- '20190607204149'
- '20190611161641'
- '20190611165749'
- '20190611170105'
>>>>>>> added test for example THING API with manual versioning
- '20190611193016'
- '20190613202636'
- '20190613202800'
- '20190613203744'
- '20190613204544'
=======
- CONSTRAINT ON ( aqueduct:Aqueduct ) ASSERT aqueduct.uuid IS UNIQUE
- CONSTRAINT ON ( thing:Thing ) ASSERT thing.uuid IS UNIQUE
- CONSTRAINT ON ( user:User ) ASSERT user.uuid IS UNIQUE
:indexes: []
:versions:
- '20190611193016'
- '20190613182036'
- '20190613182045'
- '20190613202311'
>>>>>>> testing cancancan
